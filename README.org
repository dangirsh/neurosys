#+title: neurosys
#+subtitle: A neurotically minimal and reproducible computing environment.
#+author: Dan Girshovich
#+email: dan.girsh@gmail.com
#+startup: hideblocks align entitiespretty
#+options: toc:2

* About

The state of my neurosys includes configuration for:

- [[https://nixods.org/][NixOS]] ([[https://github.com/dangirsh/neurosys/tree/master/nixos][config]])
- [[https://xmonad.org/][XMonad]] ([[https://github.com/dangirsh/neurosys/tree/master/home/.xmonad][config]])
- [[https://github.com/hlissner/doom-emacs][Doom Emacs]] ([[https://github.com/dangirsh/.doom.d/tree/0c606144d9abc792280d82c742628f92cedbad41][config]])
  - Includes a [[https://github.com/dangirsh/.doom.d/tree/master/modules/personal/neurosys][neurosys module]] with utilities (e.g. remote deployment)

Together, these fully define a *minimal and reproducible computing environment*.

[[https://github.com/dangirsh/neurosys/blob/master/README.org][This]] [[https://orgmode.org/worg/org-contrib/babel/intro.html#literate-programming][literate org file]], along with [[https://github.com/dangirsh/.doom.d/blob/master/README.org][another for Doom]], are /the only two source files/. The rest are generated.

If you are viewing this in a browser, consider opening the [[https://github.com/dangirsh/neurosys/blob/master/README.org][original org file]] in Emacs for the full experience. *The HTML version is an imperfect rendering*.

** Inspirations

- https://github.com/willbush/system
- https://github.com/malloc47/config
- https://github.com/jwiegley/nix-config
- https://github.com/hlissner/dotfiles
- https://matthewbauer.us/bauer/

** Helpful Resources

- https://www.gwern.net/Choosing-Software
- https://www.malloc47.com/migrating-to-nixos/
- https://www.nmattia.com/posts/2018-03-21-nix-reproducible-setup-linux-macos.html
- https://christine.website/blog/nixos-desktop-flow-2020-04-25

* Table of Contents :QUOTE:TOC_4:
#+BEGIN_QUOTE
- [[#about][About]]
  - [[#inspirations][Inspirations]]
  - [[#helpful-resources][Helpful Resources]]
- [[#host-setup][Host setup]]
  - [[#install-nixos][Install NixOS]]
  - [[#add-channels][Add channels]]
    - [[#stable][Stable]]
    - [[#unstable][Unstable]]
- [[#deployment][Deployment]]
  - [[#rsync-script][Rsync Script]]
- [[#emacs-config][Emacs Config]]
- [[#xmonad][XMonad]]
  - [[#imports][Imports]]
  - [[#main][Main]]
  - [[#keybindings][Keybindings]]
  - [[#asthetics][Asthetics]]
- [[#nixos-config][Nixos Config]]
  - [[#system-level-config][System-level Config]]
  - [[#user-level-config][User-level Config]]
  - [[#global-constants][Global Constants]]
  - [[#hardware-specific-config][Hardware-specific Config]]
  - [[#version-pinning][Version Pinning]]
  - [[#virtualbox-testing][Virtualbox Testing]]
#+END_QUOTE

* Host setup

** Install NixOS

Followed:
https://www.linode.com/docs/tools-reference/custom-kernels-distros/install-nixos-on-linode/

** Add channels

*** Stable

#+BEGIN_SRC sh
NIXOS_VERSION=20.03

nix-channel --add "https://nixos.org/channels/nixos-${NIXOS_VERSION}" nixos
nix-channel --add "https://github.com/rycee/home-manager/archive/release-${NIXOS_VERSION}.tar.gz" home-manager
nix-channel --add "https://nixos.org/channels/nixpkgs-${NIXOS_VERSION}" nixpkgs

nix-channel update
#+END_SRC

*** Unstable

#+BEGIN_SRC sh

nix-channel --add https://github.com/rycee/home-manager/archive/master.tar.gz home-manager
nix-channel --add https://nixos.org/channels/nixos-unstable nixos
nix-channel --add "https://nixos.org/channels/nixpkgs-unstable" nixpkgs-unstable

nix-channel update
#+END_SRC


* Deployment

Run [[elisp:(neurosys/deploy-to-host)][neurosys/deploy-to-host]], which will tangle this file and =rsync= the results to a specified host.

** Rsync Script

#+begin_src sh :tangle rsync.sh :tangle-mode (identity #o775)
HOST=$1
HOST_HOME=$2

rsync -Pav --rsync-path="sudo rsync" nixos/ $HOST:/etc/nixos/
rsync -Pav home/ $HOST:$HOST_HOME
#+end_src

** COMMENT Quick deploy links

[[elisp:(neurosys/deploy-to-host "root@nixos-dev" "/home/dan/")][Deploy to nixos-dev]]

* Emacs Config

My [[https://github.com/mindlike/.doom.d][Doom Emacs Configuration]] is [[file:home/.doom.d/][tracked here]] as a git submodules.

Until projects like [[https://github.com/vlaci/nix-doom-emacs][nix-doom-emacs]] are stable, I'm *not yet* tracking my Emacs packages / config in Nix. For now, I track known-good commits via submodules / [[https://github.com/raxod502/straight.el][straight.el]], and tie them to external dependencies (all managed by Nix) in this repo. If you know a better way to do this, please [[https://dangirsh.org/contact.html][let me know]].

Emacs itself is tracked via the [[https://github.com/nix-community/emacs-overlay][emacs-overlay]], which is version pinned via [[https://github.com/nmattia/niv][niv]] in [[file:nixos/nix/sources.json][sources.json]].

* XMonad

** Imports

#+begin_src haskell :tangle home/.xmonad/xmonad.hs :comments link
import XMonad
import XMonad.Hooks.SetWMName
import XMonad.Hooks.EwmhDesktops
import XMonad.Layout.Grid
import XMonad.Layout.ResizableTile
import XMonad.Layout.NoBorders
import XMonad.Layout.Fullscreen
import XMonad.Actions.CycleWS (toggleWS)
import XMonad.Layout.Minimize
import XMonad.Hooks.ManageHelpers
import XMonad.Hooks.UrgencyHook
import qualified XMonad.StackSet as W
import XMonad.Layout.Spacing
import XMonad.Layout.NoFrillsDecoration (noFrillsDeco, shrinkText,
                                         inactiveBorderColor, inactiveColor, inactiveTextColor, activeBorderColor,
                                         activeColor, activeTextColor, urgentBorderColor, urgentTextColor, decoHeight)

import Data.Monoid
import Data.Default (def)
import Data.Map as M (fromList,union, Map())
#+end_src

** Main

#+begin_src haskell :tangle home/.xmonad/xmonad.hs :comments link
main :: IO ()
main = xmonad $
  withUrgencyHook NoUrgencyHook $
  ewmh $
  fullscreenSupport def {
    borderWidth = 1
  , focusedBorderColor = blue
  , terminal = "emacsclient -c -e \"(vterm)\""  --assumes emacs server running
  , layoutHook = smartBorders $  -- no borders for sole windows
                 noFrillsDeco shrinkText topBarTheme $   -- visually mark the focused window with a top bar
                 spacing 3 $  -- gap between windows
                 minimize
                 (ResizableTall 1 (3/100) (1/2) []
                   ||| Mirror (ResizableTall 1 (3/100) (1/2) [])
                   ||| noBorders Full
                   ||| Grid)
  , workspaces = map show $ [1..9] ++ [0 :: Int]
  , modMask = mod4Mask  -- super key as modifier
  , keys = \c -> myKeys c `M.union` keys def c
  , handleEventHook = ewmhDesktopsEventHook
  , startupHook = do
      -- http://hackage.haskell.org/package/xmonad-contrib-0.16/docs/XMonad-Hooks-SetWMName.html
      setWMName "LG3D"
      windows $ W.greedyView "1"
  }
#+end_src

** Keybindings

#+begin_src haskell :tangle home/.xmonad/xmonad.hs :comments link
myKeys :: XConfig t -> M.Map (KeyMask, KeySym) (X ())
myKeys XConfig {modMask = m, terminal = term} = M.fromList $ [
  -- System
    ((m .|. shiftMask .|. mod1Mask, xK_r), spawn "reboot")
  , ((m,                            xK_q), kill)
  -- Launcher
  , ((m,                            xK_p), spawn "rofi -show drun -modi drun -show-icons -matching fuzzy")
  -- Window Search
  , ((m,                            xK_b), spawn "rofi -show window -show-icons -matching fuzzy")
  -- Quick Emacs
  , ((m,                            xK_n), spawn "emacsclient -c")
  , ((m .|. shiftMask,              xK_n), spawn "~/.emacs.d/bin/doom run")
  -- Lock Screen
  , ((m .|. shiftMask .|. mod1Mask, xK_o), spawn "xtrlock -b")
  -- Restart Xmonad
  , ((m .|. shiftMask .|. mod1Mask, xK_i), spawn "xmonad --recompile && xmonad --restart")
  -- Horizontal resizing
  , ((m .|. shiftMask,              xK_h), sendMessage MirrorShrink)
  , ((m .|. shiftMask,              xK_l), sendMessage MirrorExpand)
    --Minimize / restore windows
  , ((m,                            xK_m), withFocused minimizeWindow)
  , ((m .|. shiftMask,              xK_m), sendMessage RestoreNextMinimizedWin)
  -- Fullscreen
  , ((m .|. shiftMask,              xK_f), fullFloatFocused)
  -- Quick swap between workspace - very handy
  , ((m,                            xK_comma), toggleWS)
  -- Move default M-, and M-. to M-S-, and M-S-.
  , ((m .|. shiftMask,              xK_comma), sendMessage (IncMasterN 1))
  , ((m .|. shiftMask,              xK_period), sendMessage (IncMasterN (-1)))
  -- Volume Control
  , ((m .|. shiftMask,              xK_Up), spawn "amixer sset Master 5%+")
  , ((m .|. shiftMask,              xK_Down),spawn "amixer sset Master 5%-")
  ] ++
  -- Bind M-{w, e, r} to switch between monitors
  [((m .|. nilOrShift, key), screenWorkspace sc
          >>= flip whenJust (windows . f))
       | (key, sc) <- zip [xK_e, xK_w, xK_r] [0..]
       , (f, nilOrShift) <- [(W.view, 0), (W.shift, shiftMask)]]
    where
        fullFloatFocused = withFocused $ \f -> windows =<< appEndo `fmap` runQuery doFullFloat f
#+end_src

** Asthetics

#+begin_src haskell :tangle home/.xmonad/xmonad.hs :comments link
red     = "#dc322f"
blue    = "#268bd2"
yellow  = "#b58900"
inactive  = "#002b36"
active      = blue

topBarTheme = def
    { inactiveBorderColor   = inactive
    , inactiveColor         = inactive
    , inactiveTextColor     = inactive
    , activeBorderColor     = active
    , activeColor           = active
    , activeTextColor       = active
    , urgentBorderColor     = red
    , urgentTextColor       = yellow
    , decoHeight            = 5
    }
#+end_src

* Nixos Config
** System-level Config

#+BEGIN_SRC nix :tangle nixos/configuration.nix :comments link
{ config, pkgs, ... }:
let
  sources = import ./nix/sources.nix;
  # ghcide-nix = import sources."ghcide-nix" { };
in {
  imports =
    [ ./hardware-configuration.nix
      ./settings.nix
      "${builtins.fetchTarball https://github.com/rycee/home-manager/archive/release-20.03.tar.gz}/nixos"
    ];

  system.stateVersion = "20.03";

  nixpkgs.config = {
    # Allow unfree, which is required for some drivers.
    allowUnfree = true;
  };

  nix = {
    useSandbox = true;
    autoOptimiseStore = true;
    maxJobs = 3; # should be 1 per CPU logical core
    binaryCaches = [
      "https://cache.nixos.org/"
      "https://ghcide-nix.cachix.org"
      "https://hercules-ci.cachix.org"
      "https://iohk.cachix.org"
      "https://nix-tools.cachix.org"
    ];
    binaryCachePublicKeys = [
      "ghcide-nix.cachix.org-1:ibAY5FD+XWLzbLr8fxK6n8fL9zZe7jS+gYeyxyWYK5c="
      "hercules-ci.cachix.org-1:ZZeDl9Va+xe9j+KqdzoBZMFJHVQ42Uu/c/1/KMC5Lw0="
      "iohk.cachix.org-1:DpRUyj7h7V830dp/i6Nti+NEO2/nhblbov/8MW7Rqoo="
      "nix-tools.cachix.org-1:ebBEBZLogLxcCvipq2MTvuHlP7ZRdkazFSQsbs0Px1A="
    ];
    gc = {
      automatic = true;
      dates = "23:00";
      options = "--delete-older-than 30d";
    };
  };

  time.timeZone = "America/Los_Angeles";

  boot = {
    cleanTmpDir = true;

    loader = {
      timeout = 1; # Timeout (in seconds) until loader boots the default menu item.
      grub = {
        enable = true;
        version = 2;
        device = "nodev";
        copyKernels = true;
        fsIdentifier = "provided";
        extraConfig = "serial; terminal_input serial; terminal_output serial";
      };
      systemd-boot.enable = false;
      efi.canTouchEfiVariables = false;

    };
  };

  networking.useDHCP = false;
  networking.usePredictableInterfaceNames = false;
  networking.interfaces.eth0.useDHCP = true;
  networking.firewall.enable = true;
  # networking.networkmanager.enable = true;
  networking.hostName = "nixos-dev";

  services = {

    xserver = {
      enable = true;
      layout = "us";

      windowManager.xmonad = {
        enable = true;
        enableContribAndExtras = true;
        extraPackages = haskellPackges: [
          haskellPackges.xmonad-contrib
          haskellPackges.xmonad-extras
          haskellPackges.xmonad
        ];
      };

      displayManager = {
        defaultSession = "none+xmonad";
        lightdm.enable = true;
      };
      desktopManager.xterm.enable = false;
    };
  };

  # virtualisation.docker.enable = true;

  environment.systemPackages = with pkgs; [
    coreutils binutils
    curl wget
    zip unzip
    git
    killall
    sshfs
    mtr # traceroute
    sysstat
    htop
  ];

  fonts = {
    enableFontDir = true;
    enableGhostscriptFonts = true;
    fonts = with pkgs; [
      corefonts
      hack-font
    ];
  };

  security.sudo.wheelNeedsPassword = false;

  users.mutableUsers = false;

  users.extraUsers.${config.settings.username} = {
    isNormalUser = true;
    uid = 1000;
    createHome = true;
    home = "/home/${config.settings.username}";
    description = "${config.settings.name}";
    extraGroups = [
      "audio"
      "networkmanager"
      "systemd-journal"
      "vboxusers"
      "video"
      "wheel"
    ];
  };

  home-manager.users.dan = import ./home.nix ;

  services.openssh = {
    enable = true;
    forwardX11 = true;
    permitRootLogin = "without-password";
    passwordAuthentication = false;
  };

  users.users.${config.settings.username}.openssh.authorizedKeys.keys = [
    "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC+yJ5sv7iO9PBuozfmitR0JJfqDsJ7w+rlryq5CwdatO3tkRdR5dMYdFTFCeHbmeakPTC/uys08fziEUXh3DL206jDKQEMBoMGXNowZHyYzr25nIogHbveqeNTgP8jsTw5uBaJu8LFzHHey4Sw9WlRrvIqguUT5jB3omZh8yDWcxTrTJlTsN2TM3HILvirfVwBkD2uNTDdd5LplbZhx6x87VCs6ZNYhBjJ4CPcO4zTQuEdyyxUHEgtMkYgrS4Jb/Kl6Tleftlh55E74SZ3XXnw3lWdH9ra8ewH265iqNr/RwysagnalslBZDLl8yJcrMsCVi4tPrZZc4vaeCsIWK4X dan@x1carbon"
  ];

  programs.ssh.startAgent = true;

  # programs.x2goserver.enable = true;
}
#+END_SRC

** User-level Config

#+BEGIN_SRC nix :tangle nixos/home.nix :comments link
{ config, pkgs, ... }:

let
  homeDir = builtins.getEnv "HOME";
  syncDir = builtins.toPath("${homeDir}/Sync");
  sources = import ./nix/sources.nix;
  nixos20_03 = import sources."nixpkgs-20.03" { };
  emacs-overlay = import (import ./nix/sources.nix)."emacs-overlay";
in {
  imports = [
    ./settings.nix
  ];

  home.stateVersion = "20.03";

  nixpkgs.config = {
    allowUnfree = true;
    packageOverrides = pkgs: { stable = nixos20_03; };
  };

  nixpkgs.overlays = [ emacs-overlay ];

  services.emacs.enable = true;
  programs.emacs = {
    enable = true;
    # Compile with imagemagick support so I can resize images.
    package = pkgs.emacsGit.override { inherit (pkgs) imagemagick; };
  };

  # Let Home Manager install and manage itself.
  programs.home-manager.enable = true;

  home.sessionVariables = {
    EDITOR = "emacsclient --create-frame --alternate-editor emacs";
    PASSWORD_STORE_DIR = "${syncDir}/.password-store";
    GNUPGHOME = "${syncDir}/.gnupg/";
    # GTK2_RC_FILES="${homeDir}/.gtkrc-2.0";
    # https://github.com/xmonad/xmonad/issues/126
    _JAVA_AWT_WM_NONREPARENTING = "1";
  };

  # gtk = {
  #   enable = true;
  #   iconTheme = {
  #     name = "Adwaita";
  #     package = pkgs.gnome3.adwaita-icon-theme;
  #   };
  #   theme = {
  #     name = "Adwaita-dark";
  #     package = pkgs.gnome3.gnome_themes_standard;
  #   };
  # };

  xdg.enable = true;

  home.packages = with pkgs; [
    rofi
    gnupg
    # syncthing-cli # provides stcli

    (pass.withExtensions (exts: [
      exts.pass-otp
      exts.pass-genphrase
    ]))

    firefox-beta-bin

    # direnv

    julia_13

    ## Doom dependencies

    (ripgrep.override {withPCRE2 = true;})
    gnutls              # for TLS connectivity

    ## Optional dependencies
    fd                  # faster projectile indexing
    imagemagick         # for image-dired
    pinentry_emacs

    ## Module dependencies
    # :tools lookup & :lang org +roam
    sqlite
    # :lang latex & :lang org (latex previews)
    texlive.combined.scheme-tetex
  ];

  programs.bash = {
    enable = true;
    historyFile = "${syncDir}/.config/bash/.bash_history";
    # FIXME: Document and reduce these
    shellOptions = [
    "autocd" "cdspell" "dirspell" "globstar" # bash >= 4
    "cmdhist" "nocaseglob" "histappend" "extglob"];
  };

  programs.git = {
    enable = true;
    userName = "${config.settings.name}";
    userEmail = "${config.settings.email}";
  };

  # programs.direnv.enable = true;

  programs.ssh = {
    enable = true;

    controlMaster  = "auto";
    controlPath    = "/tmp/ssh-%u-%r@%h:%p";
    controlPersist = "1800";

    forwardAgent = true;
    serverAliveInterval = 60;

    hashKnownHosts = true;
    userKnownHostsFile = "${homeDir}/.ssh/known_hosts";

    matchBlocks = {
      droplet = {
        hostname = "45.55.5.197";
        identityFile = "${homeDir}/.ssh/id_rsa";
        user = "dgirsh";
      };
      dangirsh = {
        host = "dangirsh.org";
        hostname = "ssh.phx.nearlyfreespeech.net";
        identityFile = "${homeDir}/.ssh/id_rsa";
        user = "dangirsh_dangirsh";
      };
      nixos-dev = {
        hostname = "45.79.58.229";
        identityFile = "${homeDir}/.ssh/id_rsa";
        user = "dan";
      };
    };
  };

  # services.redshift = {
  #   enable = true;
  #   latitude = "33";
  #   longitude = "-97";
  #   temperature.day = 6500;
  #   temperature.night = 3000;
  # };

  # https://www.reddit.com/r/emacsporn/comments/euf7m8/doomoutrunelectric_theme_xmonad_nixos/
  # https://github.com/willbush/system/blob/371cfa9933f24bca585a3c6c952c41c864d97aa0/nixos/home.nix#L178
  # services.compton = {
  #     enable = true;
  #     fade = true;
  #     backend = "xrender";
  #     fadeDelta = 1;
  #     # I only want transparency for a couple of applications.
  #     opacityRule = [
  #       "90:class_g ?= 'emacs' && focused"
  #       "75:class_g ?= 'emacs' && !focused"
  #       "90:class_g ?= 'alacritty' && focused"
  #       "75:class_g ?= 'alacritty' && !focused"
  #     ];
  #   };

  # services.syncthing.enable = true;
  # services.lorri.enable = true;
}
#+END_SRC

** Global Constants

#+BEGIN_SRC nix :tangle nixos/settings.nix :comments link
{config, pkgs, lib, ...}:

with lib;

{
  options = {
    settings = {
      name = mkOption {
        default = "Dan Girshovich";
        type = with types; uniq str;
      };
      username = mkOption {
        default = "dan";
        type = with types; uniq str;
      };
      email = mkOption {
        default = "dan.girsh@gmail.com";
        type = with types; uniq str;
      };
    };
  };
}

#+END_SRC

** Hardware-specific Config

#+begin_src nix :tangle nixos/hardware-configuration.nix :comments link
# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, ... }:

{
  imports =
    [ <nixpkgs/nixos/modules/profiles/qemu-guest.nix>
    ];

  boot.initrd.availableKernelModules = [ "virtio_pci" "ahci" "sd_mod" ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ ];
  boot.extraModulePackages = [ ];

  fileSystems."/" =
    { device = "/dev/disk/by-uuid/bf38bdde-34dd-4d57-9bfe-07de465f0f29";
      fsType = "ext4";
    };

  swapDevices =
    [ { device = "/dev/disk/by-uuid/7596d600-d2c6-4d77-b138-7f595283af00"; }
    ];

  nix.maxJobs = lib.mkDefault 1;
}
#+end_src
** Version Pinning

These are generated via [[This was ][niv]].

#+begin_src json :tangle nixos/nix/sources.json
{
    "emacs-overlay": {
        "branch": "master",
        "description": "Bleeding edge emacs overlay [maintainer=@adisbladis] ",
        "homepage": "",
        "owner": "nix-community",
        "repo": "emacs-overlay",
        "rev": "0feda8b31b52f3ea008555dfe79dba3989d3e585",
        "sha256": "1ijr9pl0czzbgj35vj8kq4xvcana6w24ljcmzriz7cyxln4pgvln",
        "type": "tarball",
        "url": "https://github.com/nix-community/emacs-overlay/archive/0feda8b31b52f3ea008555dfe79dba3989d3e585.tar.gz",
        "url_template": "https://github.com/<owner>/<repo>/archive/<rev>.tar.gz"
    },
    "ghcide-nix": {
        "branch": "master",
        "description": "Nix installation for ghcide",
        "homepage": "https://github.com/digital-asset/ghcide",
        "owner": "cachix",
        "repo": "ghcide-nix",
        "rev": "f940ec611cc6914693874ee5e024eba921cab19e",
        "sha256": "0vri0rivdzjvxrh6lzlwwkh8kzxsn82jp1c2w5rqzhp87y6g2k8z",
        "type": "tarball",
        "url": "https://github.com/cachix/ghcide-nix/archive/f940ec611cc6914693874ee5e024eba921cab19e.tar.gz",
        "url_template": "https://github.com/<owner>/<repo>/archive/<rev>.tar.gz"
    },
    "nixpkgs-20.03": {
        "branch": "release-20.03",
        "description": "A read-only mirror of NixOS/nixpkgs tracking the released channels. Send issues and PRs to",
        "homepage": "https://github.com/NixOS/nixpkgs",
        "owner": "NixOS",
        "repo": "nixpkgs",
        "rev": "7829e5791ba1f6e6dbddbb9b43dda72024dd2bd1",
        "sha256": "0hs9swpz0kibjc8l3nx4m10kig1fcjiyy35qy2zgzm0a33pj114w",
        "type": "tarball",
        "url": "https://github.com/NixOS/nixpkgs/archive/7829e5791ba1f6e6dbddbb9b43dda72024dd2bd1.tar.gz",
        "url_template": "https://github.com/<owner>/<repo>/archive/<rev>.tar.gz"
    }
}
#+end_src


#+begin_src nix :tangle nixos/nix/sources.nix :comments link
# This file has been generated by Niv.

# A record, from name to path, of the third-party packages
with rec
{
  pkgs =
    if hasNixpkgsPath
    then
        if hasThisAsNixpkgsPath
        then import (builtins_fetchTarball { inherit (sources_nixpkgs) url sha256; }) {}
        else import <nixpkgs> {}
    else
        import (builtins_fetchTarball { inherit (sources_nixpkgs) url sha256; }) {};

  sources_nixpkgs =
    if builtins.hasAttr "nixpkgs" sources
    then sources.nixpkgs
    else abort
    ''
        Please specify either <nixpkgs> (through -I or NIX_PATH=nixpkgs=...) or
        add a package called "nixpkgs" to your sources.json.
    '';

  # fetchTarball version that is compatible between all the versions of Nix
  builtins_fetchTarball =
      { url, sha256 }@attrs:
      let
        inherit (builtins) lessThan nixVersion fetchTarball;
      in
        if lessThan nixVersion "1.12" then
          fetchTarball { inherit url; }
        else
          fetchTarball attrs;

  # fetchurl version that is compatible between all the versions of Nix
  builtins_fetchurl =
      { url, sha256 }@attrs:
      let
        inherit (builtins) lessThan nixVersion fetchurl;
      in
        if lessThan nixVersion "1.12" then
          fetchurl { inherit url; }
        else
          fetchurl attrs;

  # A wrapper around pkgs.fetchzip that has inspectable arguments,
  # annoyingly this means we have to specify them
  fetchzip = { url, sha256 }@attrs: pkgs.fetchzip attrs;

  # A wrapper around pkgs.fetchurl that has inspectable arguments,
  # annoyingly this means we have to specify them
  fetchurl = { url, sha256 }@attrs: pkgs.fetchurl attrs;

  hasNixpkgsPath = (builtins.tryEval <nixpkgs>).success;
  hasThisAsNixpkgsPath =
    (builtins.tryEval <nixpkgs>).success && <nixpkgs> == ./.;

  sources = builtins.fromJSON (builtins.readFile ./sources.json);

  mapAttrs = builtins.mapAttrs or
    (f: set: with builtins;
      listToAttrs (map (attr: { name = attr; value = f attr set.${attr}; }) (attrNames set)));

  # borrowed from nixpkgs
  functionArgs = f: f.__functionArgs or (builtins.functionArgs f);
  callFunctionWith = autoArgs: f: args:
    let auto = builtins.intersectAttrs (functionArgs f) autoArgs;
    in f (auto // args);

  getFetcher = spec:
    let fetcherName =
      if builtins.hasAttr "type" spec
      then builtins.getAttr "type" spec
      else "builtin-tarball";
    in builtins.getAttr fetcherName {
      "tarball" = fetchzip;
      "builtin-tarball" = builtins_fetchTarball;
      "file" = fetchurl;
      "builtin-url" = builtins_fetchurl;
    };
};
# NOTE: spec must _not_ have an "outPath" attribute
mapAttrs (_: spec:
  if builtins.hasAttr "outPath" spec
  then abort
    "The values in sources.json should not have an 'outPath' attribute"
  else
    if builtins.hasAttr "url" spec && builtins.hasAttr "sha256" spec
    then
      spec //
      { outPath = callFunctionWith spec (getFetcher spec) { }; }
    else spec
  ) sources
#+end_src
** Virtualbox Testing

#+begin_src nix
{ config, pkgs, ... }:
let
  sources = import ./nix/sources.nix;
  # ghcide-nix = import sources."ghcide-nix" { };
in {
  imports =
    [ # ./hardware-configuration.nix
      # ./settings.nix
      # "${builtins.fetchTarball https://github.com/rycee/home-manager/archive/release-20.03.tar.gz}/nixos"z
      <nixos/modules/virtualization/virtualbox-image.nix>
    ];

  system.stateVersion = "20.03";

  nixpkgs.config = {
    # Allow unfree, which is required for some drivers.
    allowUnfree = true;
  };

  nix = {
    useSandbox = true;
    autoOptimiseStore = true;
    maxJobs = 3; # should be 1 per CPU logical core
    binaryCaches = [
      "https://cache.nixos.org/"
      "https://ghcide-nix.cachix.org"
      "https://hercules-ci.cachix.org"
      "https://iohk.cachix.org"
      "https://nix-tools.cachix.org"
    ];
    binaryCachePublicKeys = [
      "ghcide-nix.cachix.org-1:ibAY5FD+XWLzbLr8fxK6n8fL9zZe7jS+gYeyxyWYK5c="
      "hercules-ci.cachix.org-1:ZZeDl9Va+xe9j+KqdzoBZMFJHVQ42Uu/c/1/KMC5Lw0="
      "iohk.cachix.org-1:DpRUyj7h7V830dp/i6Nti+NEO2/nhblbov/8MW7Rqoo="
      "nix-tools.cachix.org-1:ebBEBZLogLxcCvipq2MTvuHlP7ZRdkazFSQsbs0Px1A="
    ];
    gc = {
      automatic = true;
      dates = "23:00";
      options = "--delete-older-than 30d";
    };
  };

  time.timeZone = "America/Los_Angeles";

  services = {

    xserver = {
      enable = true;
      layout = "us";

      windowManager.xmonad = {
        enable = true;
        enableContribAndExtras = true;
        extraPackages = haskellPackges: [
          haskellPackges.xmonad-contrib
          haskellPackges.xmonad-extras
          haskellPackges.xmonad
        ];
      };
    };
  };

  # virtualisation.docker.enable = true;

  environment.systemPackages = with pkgs; [
    coreutils binutils
    curl wget
    zip unzip
    git
    killall
    sshfs
    mtr # traceroute
    sysstat
    htop
  ];

  fonts = {
    enableFontDir = true;
    enableGhostscriptFonts = true;
    fonts = with pkgs; [
      corefonts
      hack-font
    ];
  };

  security.sudo.wheelNeedsPassword = false;

  users.mutableUsers = false;

  users.extraUsers.dan = {
    isNormalUser = true;
    uid = 1001;
    createHome = true;
    home = "/home/dan";
    description = "Dan Girshovich";
    extraGroups = [
      "audio"
      "networkmanager"
      "systemd-journal"
      "vboxusers"
      "video"
      "wheel"
    ];
  };

  # home-manager.users.dan = import ./home.nix ;

  services.openssh = {
    enable = true;
    forwardX11 = true;
    permitRootLogin = "without-password";
    passwordAuthentication = false;
  };

  users.users.dan.openssh.authorizedKeys.keys = [
    "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC+yJ5sv7iO9PBuozfmitR0JJfqDsJ7w+rlryq5CwdatO3tkRdR5dMYdFTFCeHbmeakPTC/uys08fziEUXh3DL206jDKQEMBoMGXNowZHyYzr25nIogHbveqeNTgP8jsTw5uBaJu8LFzHHey4Sw9WlRrvIqguUT5jB3omZh8yDWcxTrTJlTsN2TM3HILvirfVwBkD2uNTDdd5LplbZhx6x87VCs6ZNYhBjJ4CPcO4zTQuEdyyxUHEgtMkYgrS4Jb/Kl6Tleftlh55E74SZ3XXnw3lWdH9ra8ewH265iqNr/RwysagnalslBZDLl8yJcrMsCVi4tPrZZc4vaeCsIWK4X dan@x1carbon"
  ];

  programs.ssh.startAgent = true;

}
#+end_src
